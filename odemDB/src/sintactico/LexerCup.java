/* The following code was generated by JFlex 1.4.3 on 15/07/24, 15:13 */

package sintactico;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15/07/24, 15:13 from the specification file
 * <tt>C:/Users/denil/OneDrive/Escritorio/odemDB/src/sintactico/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 60,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 51, 58,  0,  0,  0, 49, 56, 53, 54,  0,  0,  4,  0,  0, 59, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 55,  0, 52,  0,  0, 
     0, 13, 35, 11, 40, 16, 14, 46, 29, 22, 57, 36, 32, 42, 23, 25, 
    48, 57, 12, 30, 15, 47, 24, 37, 57, 26, 57,  0,  0,  0,  0,  1, 
     0,  7, 33,  5, 39, 10,  8, 43, 27, 17, 57, 34, 31, 41, 18, 20, 
    45, 57,  6, 28,  9, 44, 19, 38, 57, 21, 57,  0, 50,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\26\2\3\1"+
    "\1\6\1\7\1\10\1\11\3\1\43\2\1\12\1\13"+
    "\1\14\2\0\1\15\1\4\13\2\1\16\2\2\1\17"+
    "\31\2\1\20\1\2\1\21\3\2\1\22\7\2\1\23"+
    "\1\2\1\24\17\2\1\25\3\2\1\26\1\2\1\27"+
    "\5\2\1\30\6\2\1\31\1\32\4\2\1\33\6\2"+
    "\1\34\2\2\1\35\1\36\1\37\2\2\1\40\6\2"+
    "\1\41\10\2\1\42\1\43\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\75\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\75"+
    "\0\75\0\75\0\75\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\75\0\75\0\75\0\u1034\0\u0763\0\75\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\172\0\u134d\0\u138a\0\172\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af"+
    "\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\75\0\u19bc\0\172\0\u19f9\0\u1a36\0\u1a73\0\172\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\172\0\u1c5b"+
    "\0\172\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\172\0\u202b\0\u2068\0\u20a5\0\172\0\u20e2\0\172\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\u2213\0\172\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\u2381\0\172\0\172\0\u23be\0\u23fb\0\u2438"+
    "\0\u2475\0\172\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3"+
    "\0\172\0\u2620\0\u265d\0\172\0\172\0\172\0\u269a\0\u26d7"+
    "\0\172\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\172"+
    "\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d"+
    "\0\172\0\172\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\3\1\13\1\14\1\3\1\11\1\12"+
    "\1\3\1\15\1\16\1\3\1\17\1\3\1\20\1\21"+
    "\1\3\1\22\2\3\1\23\1\3\1\24\2\3\1\25"+
    "\1\3\1\26\3\3\1\27\1\30\1\31\1\32\1\33"+
    "\2\3\1\34\2\3\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\3\1\45\1\46\1\5\76\0"+
    "\2\3\2\0\54\3\10\0\1\3\5\0\1\4\75\0"+
    "\1\5\70\0\1\5\1\0\2\3\2\0\1\3\1\47"+
    "\24\3\1\50\25\3\10\0\1\3\4\0\2\3\2\0"+
    "\5\3\1\51\46\3\10\0\1\3\4\0\2\3\2\0"+
    "\2\3\1\52\51\3\10\0\1\3\4\0\2\3\2\0"+
    "\1\3\1\53\52\3\10\0\1\3\4\0\2\3\2\0"+
    "\7\3\1\54\20\3\1\55\23\3\10\0\1\3\4\0"+
    "\2\3\2\0\13\3\1\56\40\3\10\0\1\3\4\0"+
    "\2\3\2\0\15\3\1\57\36\3\10\0\1\3\4\0"+
    "\2\3\2\0\5\3\1\60\11\3\1\61\27\3\1\62"+
    "\4\3\10\0\1\3\4\0\2\3\2\0\1\3\1\63"+
    "\46\3\1\64\3\3\10\0\1\3\4\0\2\3\2\0"+
    "\22\3\1\65\31\3\10\0\1\3\4\0\2\3\2\0"+
    "\13\3\1\66\10\3\1\67\25\3\1\70\1\3\10\0"+
    "\1\3\4\0\2\3\2\0\7\3\1\71\43\3\1\72"+
    "\10\0\1\3\4\0\2\3\2\0\4\3\1\73\1\74"+
    "\46\3\10\0\1\3\4\0\2\3\2\0\13\3\1\75"+
    "\40\3\10\0\1\3\4\0\2\3\2\0\17\3\1\76"+
    "\12\3\1\77\21\3\10\0\1\3\4\0\2\3\2\0"+
    "\24\3\1\100\6\3\1\101\20\3\10\0\1\3\4\0"+
    "\2\3\2\0\5\3\1\102\6\3\1\103\37\3\10\0"+
    "\1\3\4\0\2\3\2\0\13\3\1\104\5\3\1\105"+
    "\32\3\10\0\1\3\4\0\2\3\2\0\14\3\1\106"+
    "\37\3\10\0\1\3\4\0\2\3\2\0\21\3\1\107"+
    "\32\3\10\0\1\3\4\0\2\3\2\0\1\3\1\110"+
    "\52\3\10\0\1\3\4\0\2\3\2\0\7\3\1\111"+
    "\44\3\10\0\1\3\64\0\1\112\75\0\1\113\76\0"+
    "\1\114\12\0\1\115\2\0\54\115\10\0\1\115\3\0"+
    "\72\116\1\117\2\116\73\0\1\120\2\0\2\3\2\0"+
    "\2\3\1\121\51\3\10\0\1\3\4\0\2\3\2\0"+
    "\2\3\1\122\2\3\1\123\46\3\10\0\1\3\4\0"+
    "\2\3\2\0\3\3\1\124\11\3\1\125\36\3\10\0"+
    "\1\3\4\0\2\3\2\0\32\3\1\126\21\3\10\0"+
    "\1\3\4\0\2\3\2\0\47\3\1\127\4\3\10\0"+
    "\1\3\4\0\2\3\2\0\10\3\1\130\43\3\10\0"+
    "\1\3\4\0\2\3\2\0\13\3\1\131\40\3\10\0"+
    "\1\3\4\0\2\3\2\0\11\3\1\132\10\3\1\133"+
    "\31\3\10\0\1\3\4\0\2\3\2\0\4\3\1\134"+
    "\11\3\1\135\35\3\10\0\1\3\4\0\2\3\2\0"+
    "\4\3\1\136\47\3\10\0\1\3\4\0\2\3\2\0"+
    "\4\3\1\137\10\3\1\140\36\3\10\0\1\3\4\0"+
    "\2\3\2\0\32\3\1\141\21\3\10\0\1\3\4\0"+
    "\2\3\2\0\42\3\1\142\11\3\10\0\1\3\4\0"+
    "\2\3\2\0\5\3\1\143\46\3\10\0\1\3\4\0"+
    "\2\3\2\0\23\3\1\144\30\3\10\0\1\3\4\0"+
    "\2\3\2\0\12\3\1\145\41\3\10\0\1\3\4\0"+
    "\2\3\2\0\12\3\1\137\7\3\1\146\31\3\10\0"+
    "\1\3\4\0\2\3\2\0\33\3\1\147\20\3\10\0"+
    "\1\3\4\0\2\3\2\0\43\3\1\150\10\3\10\0"+
    "\1\3\4\0\2\3\2\0\13\3\1\151\40\3\10\0"+
    "\1\3\4\0\2\3\2\0\1\3\1\152\52\3\10\0"+
    "\1\3\4\0\2\3\2\0\32\3\1\153\21\3\10\0"+
    "\1\3\4\0\2\3\2\0\33\3\1\154\20\3\10\0"+
    "\1\3\4\0\2\3\2\0\2\3\1\155\51\3\10\0"+
    "\1\3\4\0\2\3\2\0\17\3\1\156\34\3\10\0"+
    "\1\3\4\0\2\3\2\0\10\3\1\157\43\3\10\0"+
    "\1\3\4\0\2\3\2\0\24\3\1\160\27\3\10\0"+
    "\1\3\4\0\2\3\2\0\32\3\1\161\21\3\10\0"+
    "\1\3\4\0\2\3\2\0\2\3\1\162\51\3\10\0"+
    "\1\3\4\0\2\3\2\0\33\3\1\163\20\3\10\0"+
    "\1\3\4\0\2\3\2\0\10\3\1\164\43\3\10\0"+
    "\1\3\4\0\2\3\2\0\15\3\1\165\36\3\10\0"+
    "\1\3\4\0\2\3\2\0\22\3\1\166\31\3\10\0"+
    "\1\3\4\0\2\3\2\0\17\3\1\167\34\3\10\0"+
    "\1\3\4\0\2\3\2\0\24\3\1\170\27\3\10\0"+
    "\1\3\73\0\1\171\4\0\74\120\2\0\2\3\2\0"+
    "\3\3\1\172\50\3\10\0\1\3\4\0\2\3\2\0"+
    "\1\3\1\173\52\3\10\0\1\3\4\0\2\3\2\0"+
    "\27\3\1\174\24\3\10\0\1\3\4\0\2\3\2\0"+
    "\5\3\1\175\46\3\10\0\1\3\4\0\2\3\2\0"+
    "\5\3\1\176\46\3\10\0\1\3\4\0\2\3\2\0"+
    "\27\3\1\127\24\3\10\0\1\3\4\0\2\3\2\0"+
    "\5\3\1\177\46\3\10\0\1\3\4\0\2\3\2\0"+
    "\11\3\1\200\42\3\10\0\1\3\4\0\2\3\2\0"+
    "\31\3\1\201\22\3\10\0\1\3\4\0\2\3\2\0"+
    "\13\3\1\202\40\3\10\0\1\3\4\0\2\3\2\0"+
    "\13\3\1\203\40\3\10\0\1\3\4\0\2\3\2\0"+
    "\5\3\1\204\46\3\10\0\1\3\4\0\2\3\2\0"+
    "\26\3\1\205\25\3\10\0\1\3\4\0\2\3\2\0"+
    "\47\3\1\206\4\3\10\0\1\3\4\0\2\3\2\0"+
    "\32\3\1\207\21\3\10\0\1\3\4\0\2\3\2\0"+
    "\5\3\1\210\46\3\10\0\1\3\4\0\2\3\2\0"+
    "\15\3\1\211\36\3\10\0\1\3\4\0\2\3\2\0"+
    "\13\3\1\212\40\3\10\0\1\3\4\0\2\3\2\0"+
    "\30\3\1\213\23\3\10\0\1\3\4\0\2\3\2\0"+
    "\52\3\1\214\1\3\10\0\1\3\4\0\2\3\2\0"+
    "\33\3\1\207\20\3\10\0\1\3\4\0\2\3\2\0"+
    "\13\3\1\215\40\3\10\0\1\3\4\0\2\3\2\0"+
    "\22\3\1\211\31\3\10\0\1\3\4\0\2\3\2\0"+
    "\14\3\1\216\37\3\10\0\1\3\4\0\2\3\2\0"+
    "\5\3\1\217\46\3\10\0\1\3\4\0\2\3\2\0"+
    "\13\3\1\220\40\3\10\0\1\3\4\0\2\3\2\0"+
    "\1\3\1\221\52\3\10\0\1\3\4\0\2\3\2\0"+
    "\1\222\53\3\10\0\1\3\4\0\2\3\2\0\7\3"+
    "\1\223\44\3\10\0\1\3\4\0\2\3\2\0\6\3"+
    "\1\224\45\3\10\0\1\3\4\0\2\3\2\0\5\3"+
    "\1\225\46\3\10\0\1\3\4\0\2\3\2\0\44\3"+
    "\1\226\7\3\10\0\1\3\4\0\2\3\2\0\13\3"+
    "\1\227\40\3\10\0\1\3\4\0\2\3\2\0\45\3"+
    "\1\230\6\3\10\0\1\3\4\0\2\3\2\0\5\3"+
    "\1\231\46\3\10\0\1\3\4\0\2\3\2\0\13\3"+
    "\1\231\40\3\10\0\1\3\4\0\2\3\2\0\47\3"+
    "\1\232\4\3\10\0\1\3\4\0\2\3\2\0\52\3"+
    "\1\233\1\3\10\0\1\3\4\0\2\3\2\0\4\3"+
    "\1\234\47\3\10\0\1\3\4\0\2\3\2\0\4\3"+
    "\1\235\47\3\10\0\1\3\4\0\2\3\2\0\1\3"+
    "\1\236\52\3\10\0\1\3\4\0\2\3\2\0\41\3"+
    "\1\237\12\3\10\0\1\3\4\0\2\3\2\0\12\3"+
    "\1\240\41\3\10\0\1\3\4\0\2\3\2\0\12\3"+
    "\1\235\41\3\10\0\1\3\4\0\2\3\2\0\7\3"+
    "\1\241\44\3\10\0\1\3\4\0\2\3\2\0\40\3"+
    "\1\237\13\3\10\0\1\3\4\0\2\3\2\0\15\3"+
    "\1\242\36\3\10\0\1\3\4\0\2\3\2\0\5\3"+
    "\1\243\46\3\10\0\1\3\4\0\2\3\2\0\32\3"+
    "\1\244\21\3\10\0\1\3\4\0\2\3\2\0\1\3"+
    "\1\245\52\3\10\0\1\3\4\0\2\3\2\0\22\3"+
    "\1\246\31\3\10\0\1\3\4\0\2\3\2\0\13\3"+
    "\1\247\40\3\10\0\1\3\4\0\2\3\2\0\33\3"+
    "\1\250\20\3\10\0\1\3\4\0\2\3\2\0\7\3"+
    "\1\245\44\3\10\0\1\3\4\0\2\3\2\0\15\3"+
    "\1\251\36\3\10\0\1\3\4\0\2\3\2\0\1\252"+
    "\53\3\10\0\1\3\4\0\2\3\2\0\6\3\1\253"+
    "\45\3\10\0\1\3\4\0\2\3\2\0\42\3\1\254"+
    "\11\3\10\0\1\3\4\0\2\3\2\0\35\3\1\255"+
    "\16\3\10\0\1\3\4\0\2\3\2\0\43\3\1\254"+
    "\10\3\10\0\1\3\4\0\2\3\2\0\37\3\1\255"+
    "\14\3\10\0\1\3\4\0\2\3\2\0\4\3\1\256"+
    "\47\3\10\0\1\3\4\0\2\3\2\0\17\3\1\257"+
    "\34\3\10\0\1\3\4\0\2\3\2\0\12\3\1\260"+
    "\41\3\10\0\1\3\4\0\2\3\2\0\24\3\1\261"+
    "\27\3\10\0\1\3\4\0\2\3\2\0\50\3\1\262"+
    "\3\3\10\0\1\3\4\0\2\3\2\0\53\3\1\262"+
    "\10\0\1\3\4\0\2\3\2\0\5\3\1\263\46\3"+
    "\10\0\1\3\4\0\2\3\2\0\5\3\1\264\46\3"+
    "\10\0\1\3\4\0\2\3\2\0\13\3\1\265\40\3"+
    "\10\0\1\3\4\0\2\3\2\0\13\3\1\266\40\3"+
    "\10\0\1\3\4\0\2\3\2\0\4\3\1\267\47\3"+
    "\10\0\1\3\4\0\2\3\2\0\1\3\1\270\52\3"+
    "\10\0\1\3\4\0\2\3\2\0\32\3\1\271\21\3"+
    "\10\0\1\3\4\0\2\3\2\0\12\3\1\272\41\3"+
    "\10\0\1\3\4\0\2\3\2\0\7\3\1\273\44\3"+
    "\10\0\1\3\4\0\2\3\2\0\33\3\1\271\20\3"+
    "\10\0\1\3\4\0\2\3\2\0\46\3\1\274\5\3"+
    "\10\0\1\3\4\0\2\3\2\0\4\3\1\275\47\3"+
    "\10\0\1\3\4\0\2\3\2\0\12\3\1\275\41\3"+
    "\10\0\1\3\4\0\2\3\2\0\5\3\1\276\46\3"+
    "\10\0\1\3\4\0\2\3\2\0\15\3\1\277\36\3"+
    "\10\0\1\3\4\0\2\3\2\0\13\3\1\276\40\3"+
    "\10\0\1\3\4\0\2\3\2\0\22\3\1\300\31\3"+
    "\10\0\1\3\4\0\2\3\2\0\1\3\1\301\52\3"+
    "\10\0\1\3\4\0\2\3\2\0\15\3\1\302\36\3"+
    "\10\0\1\3\4\0\2\3\2\0\7\3\1\301\44\3"+
    "\10\0\1\3\4\0\2\3\2\0\22\3\1\303\31\3"+
    "\10\0\1\3\4\0\2\3\2\0\17\3\1\304\34\3"+
    "\10\0\1\3\4\0\2\3\2\0\14\3\1\305\37\3"+
    "\10\0\1\3\4\0\2\3\2\0\24\3\1\306\27\3"+
    "\10\0\1\3\4\0\2\3\2\0\21\3\1\307\32\3"+
    "\10\0\1\3\4\0\2\3\2\0\42\3\1\310\11\3"+
    "\10\0\1\3\4\0\2\3\2\0\43\3\1\310\10\3"+
    "\10\0\1\3\4\0\2\3\2\0\1\311\53\3\10\0"+
    "\1\3\4\0\2\3\2\0\6\3\1\312\45\3\10\0"+
    "\1\3\4\0\2\3\2\0\1\3\1\313\52\3\10\0"+
    "\1\3\4\0\2\3\2\0\4\3\1\314\47\3\10\0"+
    "\1\3\4\0\2\3\2\0\7\3\1\315\44\3\10\0"+
    "\1\3\4\0\2\3\2\0\12\3\1\316\41\3\10\0"+
    "\1\3\4\0\2\3\2\0\5\3\1\317\46\3\10\0"+
    "\1\3\4\0\2\3\2\0\13\3\1\320\40\3\10\0"+
    "\1\3\4\0\2\3\2\0\20\3\1\321\33\3\10\0"+
    "\1\3\4\0\2\3\2\0\5\3\1\322\46\3\10\0"+
    "\1\3\4\0\2\3\2\0\25\3\1\321\26\3\10\0"+
    "\1\3\4\0\2\3\2\0\13\3\1\322\40\3\10\0"+
    "\1\3\4\0\2\3\2\0\27\3\1\323\24\3\10\0"+
    "\1\3\4\0\2\3\2\0\31\3\1\323\22\3\10\0"+
    "\1\3\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10858];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\31\1\4\11\46\1\3\11"+
    "\2\0\1\11\51\1\1\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return symbol(sym.ORDER, yytext());
          }
        case 37: break;
        case 29: 
          { return symbol(sym.STRING, yytext());
          }
        case 38: break;
        case 9: 
          { return symbol(sym.PCOMA, yytext());
          }
        case 39: break;
        case 16: 
          { return symbol(sym.ISCHAR, yytext());
          }
        case 40: break;
        case 15: 
          { return symbol(sym.NOT, yytext());
          }
        case 41: break;
        case 30: 
          { return symbol(sym.SELECT, yytext());
          }
        case 42: break;
        case 10: 
          { return symbol(sym.AND, yytext());
          }
        case 43: break;
        case 5: 
          { return symbol(sym.CONCAT, yytext());
          }
        case 44: break;
        case 19: 
          { return symbol(sym.NULL, yytext());
          }
        case 45: break;
        case 14: 
          { return symbol(sym.INT, yytext());
          }
        case 46: break;
        case 7: 
          { return symbol(sym.LPAREN, yytext());
          }
        case 47: break;
        case 22: 
          { return symbol(sym.DATABASE, yytext());
          }
        case 48: break;
        case 11: 
          { return symbol(sym.OR, yytext());
          }
        case 49: break;
        case 18: 
          { return symbol(sym.BOOLEANO, yytext());
          }
        case 50: break;
        case 23: 
          { return symbol(sym.UPDATE, yytext());
          }
        case 51: break;
        case 31: 
          { return symbol(sym.DELETE, yytext());
          }
        case 52: break;
        case 34: 
          { return symbol(sym.TABLE, yytext());
          }
        case 53: break;
        case 28: 
          { return symbol(sym.NONULL, yytext());
          }
        case 54: break;
        case 26: 
          { return symbol(sym.INSERT, yytext());
          }
        case 55: break;
        case 2: 
          { return symbol(sym.IDENTIFICADOR, yytext());
          }
        case 56: break;
        case 25: 
          { return symbol(sym.FROM, yytext());
          }
        case 57: break;
        case 4: 
          { /*IGNORE*/
          }
        case 58: break;
        case 13: 
          { return symbol(sym.ISSTRING, yytext());
          }
        case 59: break;
        case 27: 
          { return symbol(sym.GROUP, yytext());
          }
        case 60: break;
        case 21: 
          { return symbol(sym.WHERE, yytext());
          }
        case 61: break;
        case 33: 
          { return symbol(sym.PRIMARYKEY, yytext());
          }
        case 62: break;
        case 35: 
          { return symbol(sym.SECONDKEY, yytext());
          }
        case 63: break;
        case 3: 
          { return symbol(sym.DIGIT, yytext());
          }
        case 64: break;
        case 17: 
          { return symbol(sym.CHAR, yytext());
          }
        case 65: break;
        case 1: 
          { return symbol(sym.ERROR, "Error léxico: '" + yytext() + "' en línea " + yyline + ", columna " + yycolumn);
          }
        case 66: break;
        case 8: 
          { return symbol(sym.RPAREN, yytext());
          }
        case 67: break;
        case 20: 
          { return symbol(sym.SHOW, yytext());
          }
        case 68: break;
        case 36: 
          { return symbol(sym.REFERENCES, yytext());
          }
        case 69: break;
        case 12: 
          { return symbol(sym.NOIGUAL, yytext());
          }
        case 70: break;
        case 32: 
          { return symbol(sym.CREATE, yytext());
          }
        case 71: break;
        case 6: 
          { return symbol(sym.IGUAL, yytext());
          }
        case 72: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
