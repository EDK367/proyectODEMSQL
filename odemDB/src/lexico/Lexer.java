/* The following code was generated by JFlex 1.4.3 on 30/06/24, 19:33 */

package lexico;

import tokenEnum.Tokens;
import static tokenEnum.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/06/24, 19:33 from the specification file
 * <tt>C:/Users/denil/OneDrive/Escritorio/odemDB/src/lexico/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\74\2\0\1\3\22\0\1\3\1\63\1\72\3\0"+
    "\1\61\1\70\1\65\1\66\2\0\1\4\2\0\1\73\12\2\1\0"+
    "\1\67\1\0\1\64\3\0\1\15\1\32\1\13\1\42\1\20\1\16"+
    "\1\56\1\26\1\46\1\71\1\34\1\24\1\52\1\35\1\33\1\60"+
    "\1\71\1\14\1\23\1\17\1\57\1\47\1\36\1\71\1\50\1\71"+
    "\4\0\1\1\1\0\1\7\1\27\1\5\1\41\1\12\1\10\1\53"+
    "\1\25\1\43\1\71\1\31\1\22\1\51\1\37\1\30\1\55\1\71"+
    "\1\6\1\21\1\11\1\54\1\44\1\40\1\71\1\45\1\71\1\0"+
    "\1\62\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\26\2\3\1"+
    "\1\6\1\7\1\10\1\11\3\1\42\2\2\0\1\12"+
    "\1\13\26\2\1\14\11\2\1\15\5\2\1\16\23\2"+
    "\1\17\30\2\1\20\11\2\1\21\12\2\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\75"+
    "\0\75\0\75\0\75\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u0763\0\75\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310"+
    "\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\172\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3"+
    "\0\u16e0\0\u171d\0\u175a\0\u1797\0\172\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\75\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\172\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c"+
    "\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\172"+
    "\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef"+
    "\0\u252c\0\172\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a"+
    "\0\u26d7\0\u2714\0\u2751\0\u278e\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\3\1\13\1\14\1\3\1\11\1\12"+
    "\1\3\1\15\1\3\1\16\3\3\1\17\1\20\1\3"+
    "\1\21\1\22\1\3\1\23\1\3\1\24\1\3\1\25"+
    "\1\26\1\27\2\3\1\30\2\3\1\31\1\32\1\33"+
    "\2\3\1\34\2\3\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\3\1\45\1\46\1\5\76\0"+
    "\2\3\2\0\54\3\10\0\1\3\5\0\1\4\75\0"+
    "\2\5\67\0\1\5\1\0\2\3\2\0\1\3\1\47"+
    "\16\3\1\50\33\3\10\0\1\3\4\0\2\3\2\0"+
    "\5\3\1\51\46\3\10\0\1\3\4\0\2\3\2\0"+
    "\2\3\1\52\51\3\10\0\1\3\4\0\2\3\2\0"+
    "\1\3\1\53\52\3\10\0\1\3\4\0\2\3\2\0"+
    "\7\3\1\54\11\3\1\55\32\3\10\0\1\3\4\0"+
    "\2\3\2\0\13\3\1\56\40\3\10\0\1\3\4\0"+
    "\2\3\2\0\4\3\1\57\1\60\46\3\10\0\1\3"+
    "\4\0\2\3\2\0\13\3\1\61\40\3\10\0\1\3"+
    "\4\0\2\3\2\0\15\3\1\62\5\3\1\63\30\3"+
    "\10\0\1\3\4\0\2\3\2\0\1\3\1\64\52\3"+
    "\10\0\1\3\4\0\2\3\2\0\17\3\1\65\6\3"+
    "\1\66\25\3\10\0\1\3\4\0\2\3\2\0\7\3"+
    "\1\67\43\3\1\70\10\0\1\3\4\0\2\3\2\0"+
    "\13\3\1\71\12\3\1\72\23\3\1\73\1\3\10\0"+
    "\1\3\4\0\2\3\2\0\5\3\1\74\15\3\1\75"+
    "\23\3\1\76\4\3\10\0\1\3\4\0\2\3\2\0"+
    "\5\3\1\77\30\3\1\100\15\3\10\0\1\3\4\0"+
    "\2\3\2\0\13\3\1\101\25\3\1\102\12\3\10\0"+
    "\1\3\4\0\2\3\2\0\32\3\1\103\21\3\10\0"+
    "\1\3\4\0\2\3\2\0\30\3\1\104\23\3\10\0"+
    "\1\3\4\0\2\3\2\0\36\3\1\105\15\3\10\0"+
    "\1\3\4\0\2\3\2\0\41\3\1\106\12\3\10\0"+
    "\1\3\4\0\2\3\2\0\1\3\1\107\52\3\10\0"+
    "\1\3\4\0\2\3\2\0\7\3\1\110\44\3\10\0"+
    "\1\3\64\0\1\40\75\0\1\40\76\0\1\40\12\0"+
    "\1\111\2\0\54\111\10\0\1\111\3\0\72\112\1\113"+
    "\2\112\73\0\1\114\2\0\2\3\2\0\2\3\1\115"+
    "\51\3\10\0\1\3\4\0\2\3\2\0\2\3\1\116"+
    "\2\3\1\117\46\3\10\0\1\3\4\0\2\3\2\0"+
    "\3\3\1\120\26\3\1\121\21\3\10\0\1\3\4\0"+
    "\2\3\2\0\15\3\1\122\36\3\10\0\1\3\4\0"+
    "\2\3\2\0\47\3\1\123\4\3\10\0\1\3\4\0"+
    "\2\3\2\0\10\3\1\124\43\3\10\0\1\3\4\0"+
    "\2\3\2\0\13\3\1\125\40\3\10\0\1\3\4\0"+
    "\2\3\2\0\11\3\1\126\16\3\1\127\23\3\10\0"+
    "\1\3\4\0\2\3\2\0\1\3\1\130\52\3\10\0"+
    "\1\3\4\0\2\3\2\0\15\3\1\131\36\3\10\0"+
    "\1\3\4\0\2\3\2\0\17\3\1\132\34\3\10\0"+
    "\1\3\4\0\2\3\2\0\23\3\1\133\30\3\10\0"+
    "\1\3\4\0\2\3\2\0\2\3\1\134\51\3\10\0"+
    "\1\3\4\0\2\3\2\0\34\3\1\135\17\3\10\0"+
    "\1\3\4\0\2\3\2\0\26\3\1\136\25\3\10\0"+
    "\1\3\4\0\2\3\2\0\10\3\1\137\43\3\10\0"+
    "\1\3\4\0\2\3\2\0\35\3\1\140\16\3\10\0"+
    "\1\3\4\0\2\3\2\0\13\3\1\141\40\3\10\0"+
    "\1\3\4\0\2\3\2\0\12\3\1\142\41\3\10\0"+
    "\1\3\4\0\2\3\2\0\12\3\1\143\15\3\1\144"+
    "\23\3\10\0\1\3\4\0\2\3\2\0\17\3\1\145"+
    "\34\3\10\0\1\3\4\0\2\3\2\0\4\3\1\146"+
    "\47\3\10\0\1\3\4\0\2\3\2\0\4\3\1\143"+
    "\25\3\1\147\21\3\10\0\1\3\4\0\2\3\2\0"+
    "\15\3\1\150\36\3\10\0\1\3\4\0\2\3\2\0"+
    "\15\3\1\151\36\3\10\0\1\3\4\0\2\3\2\0"+
    "\2\3\1\152\51\3\10\0\1\3\4\0\2\3\2\0"+
    "\17\3\1\153\34\3\10\0\1\3\4\0\2\3\2\0"+
    "\10\3\1\154\43\3\10\0\1\3\4\0\2\3\2\0"+
    "\4\3\1\155\32\3\1\156\14\3\10\0\1\3\4\0"+
    "\2\3\2\0\42\3\1\157\11\3\10\0\1\3\4\0"+
    "\2\3\2\0\32\3\1\123\21\3\10\0\1\3\4\0"+
    "\2\3\2\0\30\3\1\160\23\3\10\0\1\3\4\0"+
    "\2\3\2\0\23\3\1\161\30\3\10\0\1\3\4\0"+
    "\2\3\2\0\26\3\1\162\25\3\10\0\1\3\73\0"+
    "\1\163\4\0\74\114\2\0\2\3\2\0\3\3\1\164"+
    "\50\3\10\0\1\3\4\0\2\3\2\0\1\3\1\155"+
    "\52\3\10\0\1\3\4\0\2\3\2\0\14\3\1\165"+
    "\37\3\10\0\1\3\4\0\2\3\2\0\5\3\1\166"+
    "\46\3\10\0\1\3\4\0\2\3\2\0\5\3\1\167"+
    "\46\3\10\0\1\3\4\0\2\3\2\0\14\3\1\123"+
    "\37\3\10\0\1\3\4\0\2\3\2\0\5\3\1\143"+
    "\46\3\10\0\1\3\4\0\2\3\2\0\11\3\1\170"+
    "\42\3\10\0\1\3\4\0\2\3\2\0\16\3\1\171"+
    "\35\3\10\0\1\3\4\0\2\3\2\0\13\3\1\172"+
    "\40\3\10\0\1\3\4\0\2\3\2\0\13\3\1\173"+
    "\40\3\10\0\1\3\4\0\2\3\2\0\36\3\1\174"+
    "\15\3\10\0\1\3\4\0\2\3\2\0\5\3\1\175"+
    "\46\3\10\0\1\3\4\0\2\3\2\0\13\3\1\176"+
    "\40\3\10\0\1\3\4\0\2\3\2\0\1\177\53\3"+
    "\10\0\1\3\4\0\2\3\2\0\1\3\1\200\52\3"+
    "\10\0\1\3\4\0\2\3\2\0\5\3\1\201\46\3"+
    "\10\0\1\3\4\0\2\3\2\0\6\3\1\202\45\3"+
    "\10\0\1\3\4\0\2\3\2\0\7\3\1\203\44\3"+
    "\10\0\1\3\4\0\2\3\2\0\13\3\1\204\40\3"+
    "\10\0\1\3\4\0\2\3\2\0\30\3\1\143\23\3"+
    "\10\0\1\3\4\0\2\3\2\0\21\3\1\205\32\3"+
    "\10\0\1\3\4\0\2\3\2\0\52\3\1\206\1\3"+
    "\10\0\1\3\4\0\2\3\2\0\17\3\1\207\34\3"+
    "\10\0\1\3\4\0\2\3\2\0\20\3\1\210\33\3"+
    "\10\0\1\3\4\0\2\3\2\0\47\3\1\211\4\3"+
    "\10\0\1\3\4\0\2\3\2\0\15\3\1\207\36\3"+
    "\10\0\1\3\4\0\2\3\2\0\5\3\1\212\46\3"+
    "\10\0\1\3\4\0\2\3\2\0\44\3\1\213\7\3"+
    "\10\0\1\3\4\0\2\3\2\0\13\3\1\214\40\3"+
    "\10\0\1\3\4\0\2\3\2\0\45\3\1\215\6\3"+
    "\10\0\1\3\4\0\2\3\2\0\5\3\1\216\46\3"+
    "\10\0\1\3\4\0\2\3\2\0\13\3\1\217\40\3"+
    "\10\0\1\3\4\0\2\3\2\0\13\3\1\143\40\3"+
    "\10\0\1\3\4\0\2\3\2\0\47\3\1\220\4\3"+
    "\10\0\1\3\4\0\2\3\2\0\52\3\1\221\1\3"+
    "\10\0\1\3\4\0\2\3\2\0\4\3\1\135\47\3"+
    "\10\0\1\3\4\0\2\3\2\0\4\3\1\143\47\3"+
    "\10\0\1\3\4\0\2\3\2\0\1\3\1\222\52\3"+
    "\10\0\1\3\4\0\2\3\2\0\33\3\1\143\20\3"+
    "\10\0\1\3\4\0\2\3\2\0\12\3\1\140\41\3"+
    "\10\0\1\3\4\0\2\3\2\0\12\3\1\143\41\3"+
    "\10\0\1\3\4\0\2\3\2\0\7\3\1\223\44\3"+
    "\10\0\1\3\4\0\2\3\2\0\31\3\1\143\22\3"+
    "\10\0\1\3\4\0\2\3\2\0\32\3\1\224\21\3"+
    "\10\0\1\3\4\0\2\3\2\0\1\165\53\3\10\0"+
    "\1\3\4\0\2\3\2\0\6\3\1\171\45\3\10\0"+
    "\1\3\4\0\2\3\2\0\24\3\1\143\27\3\10\0"+
    "\1\3\4\0\2\3\2\0\34\3\1\143\17\3\10\0"+
    "\1\3\4\0\2\3\2\0\1\3\1\143\52\3\10\0"+
    "\1\3\4\0\2\3\2\0\27\3\1\143\24\3\10\0"+
    "\1\3\4\0\2\3\2\0\35\3\1\143\16\3\10\0"+
    "\1\3\4\0\2\3\2\0\7\3\1\143\44\3\10\0"+
    "\1\3\4\0\2\3\2\0\13\3\1\225\40\3\10\0"+
    "\1\3\4\0\2\3\2\0\17\3\1\226\34\3\10\0"+
    "\1\3\4\0\2\3\2\0\5\3\1\227\46\3\10\0"+
    "\1\3\4\0\2\3\2\0\15\3\1\230\36\3\10\0"+
    "\1\3\4\0\2\3\2\0\4\3\1\123\47\3\10\0"+
    "\1\3\4\0\2\3\2\0\23\3\1\231\30\3\10\0"+
    "\1\3\4\0\2\3\2\0\12\3\1\160\41\3\10\0"+
    "\1\3\4\0\2\3\2\0\26\3\1\232\25\3\10\0"+
    "\1\3\4\0\2\3\2\0\32\3\1\233\21\3\10\0"+
    "\1\3\4\0\2\3\2\0\30\3\1\234\23\3\10\0"+
    "\1\3\4\0\2\3\2\0\50\3\1\143\3\3\10\0"+
    "\1\3\4\0\2\3\2\0\53\3\1\143\10\0\1\3"+
    "\4\0\2\3\2\0\5\3\1\235\46\3\10\0\1\3"+
    "\4\0\2\3\2\0\13\3\1\236\40\3\10\0\1\3"+
    "\4\0\2\3\2\0\46\3\1\155\5\3\10\0\1\3"+
    "\4\0\2\3\2\0\7\3\1\237\44\3\10\0\1\3"+
    "\4\0\2\3\2\0\17\3\1\240\34\3\10\0\1\3"+
    "\4\0\2\3\2\0\1\3\1\241\52\3\10\0\1\3"+
    "\4\0\2\3\2\0\15\3\1\240\36\3\10\0\1\3"+
    "\4\0\2\3\2\0\32\3\1\242\21\3\10\0\1\3"+
    "\4\0\2\3\2\0\30\3\1\243\23\3\10\0\1\3"+
    "\4\0\2\3\2\0\4\3\1\244\47\3\10\0\1\3"+
    "\4\0\2\3\2\0\12\3\1\245\41\3\10\0\1\3"+
    "\4\0\2\3\2\0\32\3\1\246\21\3\10\0\1\3"+
    "\4\0\2\3\2\0\30\3\1\247\23\3\10\0\1\3"+
    "\4\0\2\3\2\0\41\3\1\250\12\3\10\0\1\3"+
    "\4\0\2\3\2\0\36\3\1\251\15\3\10\0\1\3"+
    "\4\0\2\3\2\0\34\3\1\252\17\3\10\0\1\3"+
    "\4\0\2\3\2\0\35\3\1\252\16\3\10\0\1\3"+
    "\4\0\2\3\2\0\23\3\1\253\30\3\10\0\1\3"+
    "\4\0\2\3\2\0\26\3\1\254\25\3\10\0\1\3"+
    "\4\0\2\3\2\0\1\255\53\3\10\0\1\3\4\0"+
    "\2\3\2\0\6\3\1\256\45\3\10\0\1\3\4\0"+
    "\2\3\2\0\12\3\1\257\41\3\10\0\1\3\4\0"+
    "\2\3\2\0\4\3\1\260\47\3\10\0\1\3\4\0"+
    "\2\3\2\0\1\3\1\261\52\3\10\0\1\3\4\0"+
    "\2\3\2\0\7\3\1\262\44\3\10\0\1\3\4\0"+
    "\2\3\2\0\5\3\1\263\46\3\10\0\1\3\4\0"+
    "\2\3\2\0\13\3\1\264\40\3\10\0\1\3\4\0"+
    "\2\3\2\0\13\3\1\265\40\3\10\0\1\3\4\0"+
    "\2\3\2\0\5\3\1\265\46\3\10\0\1\3\4\0"+
    "\2\3\2\0\40\3\1\143\13\3\10\0\1\3\4\0"+
    "\2\3\2\0\43\3\1\143\10\3\10\0\1\3\4\0"+
    "\2\3\2\0\14\3\1\143\37\3\10\0\1\3\4\0"+
    "\2\3\2\0\16\3\1\143\35\3\10\0\1\3\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10187];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\4\11\45\1\2\0\1\11\47\1"+
    "\1\11\102\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int yyLine = 1;
    public int yyColumn = 1;
   public void position(String text){
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '\n') {
                yyLine++;
                yyColumn = 1;
            }else{
                if(text.charAt(i) == ' '){
                    yyColumn++;
                }
            }
        }
   }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { lexeme=yytext(); position(yytext()); return SECONDKEY;
          }
        case 19: break;
        case 8: 
          { lexeme=yytext(); position(yytext()); return RPAREN;
          }
        case 20: break;
        case 17: 
          { lexeme=yytext(); position(yytext()); return PRIMARYKEY;
          }
        case 21: break;
        case 12: 
          { lexeme=yytext(); position(yytext()); return RESERVADA;
          }
        case 22: break;
        case 16: 
          { lexeme=yytext(); position(yytext()); return NONULO;
          }
        case 23: break;
        case 4: 
          { position(yytext());
          }
        case 24: break;
        case 7: 
          { lexeme=yytext(); position(yytext()); return LPAREN;
          }
        case 25: break;
        case 14: 
          { lexeme = yytext(); position(yytext()); return CHAR;
          }
        case 26: break;
        case 9: 
          { lexeme=yytext(); position(yytext()); return PCOMA;
          }
        case 27: break;
        case 10: 
          { lexeme = yytext(); position(yytext()); return STRING;
          }
        case 28: break;
        case 15: 
          { lexeme=yytext(); position(yytext()); return NULO;
          }
        case 29: break;
        case 5: 
          { lexeme=yytext(); position(yytext()); return CONCAT;
          }
        case 30: break;
        case 13: 
          { lexeme=yytext(); position(yytext()); return TIPO;
          }
        case 31: break;
        case 1: 
          { lexeme=yytext(); position(yytext()); return ERROR;
          }
        case 32: break;
        case 3: 
          { lexeme=yytext(); position(yytext()); return DIGIT;
          }
        case 33: break;
        case 2: 
          { lexeme=yytext(); position(yytext()); return IDENTIFICADOR;
          }
        case 34: break;
        case 6: 
          { lexeme=yytext(); position(yytext()); return LOGICO;
          }
        case 35: break;
        case 11: 
          { lexeme=yytext(); position(yytext()); return COMENTARIO;
          }
        case 36: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
